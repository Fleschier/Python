
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightIFELSEleftPLUSMINUSrightINTASSIGN ELSE FEWER GREATER ID IF INT LBRACKET LPAREN MINUS NUMBER PLUS RBRACKET RPARENterm : INT ID ASSIGN expressionexpression : ID ASSIGN expressionexpression : NUMBERexpression : IDexpression : expression GREATER expressionexpression : expression FEWER expressionjudge : LPAREN expression RPARENbrkt : LBRACKET expression RBRACKETterm : IF judge brkt ELSE brkt expression : expression PLUS expressionexpression : expression MINUS expressionterm : term term'
    
_lr_action_items = {'INT':([0,1,4,12,13,14,23,24,25,26,27,28,29,],[2,2,2,-4,-3,-1,-9,-8,-5,-6,-10,-11,-2,]),'IF':([0,1,4,12,13,14,23,24,25,26,27,28,29,],[3,3,3,-4,-3,-1,-9,-8,-5,-6,-10,-11,-2,]),'$end':([1,4,12,13,14,23,24,25,26,27,28,29,],[0,-12,-4,-3,-1,-9,-8,-5,-6,-10,-11,-2,]),'ID':([2,7,8,10,18,19,20,21,22,],[5,12,12,12,12,12,12,12,12,]),'LPAREN':([3,],[7,]),'ASSIGN':([5,12,],[8,22,]),'LBRACKET':([6,15,17,],[10,10,-7,]),'NUMBER':([7,8,10,18,19,20,21,22,],[13,13,13,13,13,13,13,13,]),'ELSE':([9,24,],[15,-8,]),'RPAREN':([11,12,13,25,26,27,28,29,],[17,-4,-3,-5,-6,-10,-11,-2,]),'GREATER':([11,12,13,14,16,25,26,27,28,29,],[18,-4,-3,18,18,18,18,-10,-11,18,]),'FEWER':([11,12,13,14,16,25,26,27,28,29,],[19,-4,-3,19,19,19,19,-10,-11,19,]),'PLUS':([11,12,13,14,16,25,26,27,28,29,],[20,-4,-3,20,20,20,20,-10,-11,20,]),'MINUS':([11,12,13,14,16,25,26,27,28,29,],[21,-4,-3,21,21,21,21,-10,-11,21,]),'RBRACKET':([12,13,16,25,26,27,28,29,],[-4,-3,24,-5,-6,-10,-11,-2,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'term':([0,1,4,],[1,4,4,]),'judge':([3,],[6,]),'brkt':([6,15,],[9,23,]),'expression':([7,8,10,18,19,20,21,22,],[11,14,16,25,26,27,28,29,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> term","S'",1,None,None,None),
  ('term -> INT ID ASSIGN expression','term',4,'p_expr_assign','ch6.py',37),
  ('expression -> ID ASSIGN expression','expression',3,'p_expression_assign','ch6.py',43),
  ('expression -> NUMBER','expression',1,'p_factor_num','ch6.py',48),
  ('expression -> ID','expression',1,'p_expression_ID','ch6.py',53),
  ('expression -> expression GREATER expression','expression',3,'p_greater','ch6.py',59),
  ('expression -> expression FEWER expression','expression',3,'p_smaller','ch6.py',65),
  ('judge -> LPAREN expression RPAREN','judge',3,'p_paren_expr','ch6.py',71),
  ('brkt -> LBRACKET expression RBRACKET','brkt',3,'p_bracket_expr','ch6.py',77),
  ('term -> IF judge brkt ELSE brkt','term',5,'p_logic_judge','ch6.py',82),
  ('expression -> expression PLUS expression','expression',3,'p_expression_plus','ch6.py',90),
  ('expression -> expression MINUS expression','expression',3,'p_expression_minus','ch6.py',95),
  ('term -> term term','term',2,'p_merge','ch6.py',100),
]

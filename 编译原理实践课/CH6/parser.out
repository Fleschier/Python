Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> term
Rule 1     term -> INT ID ASSIGN expression
Rule 2     expression -> ID ASSIGN expression
Rule 3     expression -> NUMBER
Rule 4     expression -> ID
Rule 5     expression -> expression GREATER expression
Rule 6     expression -> expression FEWER expression
Rule 7     judge -> LPAREN expression RPAREN
Rule 8     brkt -> LBRACKET expression RBRACKET
Rule 9     term -> IF judge brkt ELSE brkt
Rule 10    expression -> expression PLUS expression
Rule 11    expression -> expression MINUS expression
Rule 12    term -> term term

Terminals, with rules where they appear

ASSIGN               : 1 2
ELSE                 : 9
FEWER                : 6
GREATER              : 5
ID                   : 1 2 4
IF                   : 9
INT                  : 1
LBRACKET             : 8
LPAREN               : 7
MINUS                : 11
NUMBER               : 3
PLUS                 : 10
RBRACKET             : 8
RPAREN               : 7
error                : 

Nonterminals, with rules where they appear

brkt                 : 9 9
expression           : 1 2 5 5 6 6 7 8 10 10 11 11
judge                : 9
term                 : 12 12 0

Parsing method: LALR

state 0

    (0) S' -> . term
    (1) term -> . INT ID ASSIGN expression
    (9) term -> . IF judge brkt ELSE brkt
    (12) term -> . term term

    INT             shift and go to state 2
    IF              shift and go to state 3

    term                           shift and go to state 1

state 1

    (0) S' -> term .
    (12) term -> term . term
    (1) term -> . INT ID ASSIGN expression
    (9) term -> . IF judge brkt ELSE brkt
    (12) term -> . term term

    INT             shift and go to state 2
    IF              shift and go to state 3

    term                           shift and go to state 4

state 2

    (1) term -> INT . ID ASSIGN expression

    ID              shift and go to state 5


state 3

    (9) term -> IF . judge brkt ELSE brkt
    (7) judge -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 7

    judge                          shift and go to state 6

state 4

    (12) term -> term term .
    (12) term -> term . term
    (1) term -> . INT ID ASSIGN expression
    (9) term -> . IF judge brkt ELSE brkt
    (12) term -> . term term

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    $end            reduce using rule 12 (term -> term term .)
    INT             shift and go to state 2
    IF              shift and go to state 3

  ! INT             [ reduce using rule 12 (term -> term term .) ]
  ! IF              [ reduce using rule 12 (term -> term term .) ]

    term                           shift and go to state 4

state 5

    (1) term -> INT ID . ASSIGN expression

    ASSIGN          shift and go to state 8


state 6

    (9) term -> IF judge . brkt ELSE brkt
    (8) brkt -> . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 10

    brkt                           shift and go to state 9

state 7

    (7) judge -> LPAREN . expression RPAREN
    (2) expression -> . ID ASSIGN expression
    (3) expression -> . NUMBER
    (4) expression -> . ID
    (5) expression -> . expression GREATER expression
    (6) expression -> . expression FEWER expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression

    ID              shift and go to state 12
    NUMBER          shift and go to state 13

    expression                     shift and go to state 11

state 8

    (1) term -> INT ID ASSIGN . expression
    (2) expression -> . ID ASSIGN expression
    (3) expression -> . NUMBER
    (4) expression -> . ID
    (5) expression -> . expression GREATER expression
    (6) expression -> . expression FEWER expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression

    ID              shift and go to state 12
    NUMBER          shift and go to state 13

    expression                     shift and go to state 14

state 9

    (9) term -> IF judge brkt . ELSE brkt

    ELSE            shift and go to state 15


state 10

    (8) brkt -> LBRACKET . expression RBRACKET
    (2) expression -> . ID ASSIGN expression
    (3) expression -> . NUMBER
    (4) expression -> . ID
    (5) expression -> . expression GREATER expression
    (6) expression -> . expression FEWER expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression

    ID              shift and go to state 12
    NUMBER          shift and go to state 13

    expression                     shift and go to state 16

state 11

    (7) judge -> LPAREN expression . RPAREN
    (5) expression -> expression . GREATER expression
    (6) expression -> expression . FEWER expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression

    RPAREN          shift and go to state 17
    GREATER         shift and go to state 18
    FEWER           shift and go to state 19
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21


state 12

    (2) expression -> ID . ASSIGN expression
    (4) expression -> ID .

    ASSIGN          shift and go to state 22
    RPAREN          reduce using rule 4 (expression -> ID .)
    GREATER         reduce using rule 4 (expression -> ID .)
    FEWER           reduce using rule 4 (expression -> ID .)
    PLUS            reduce using rule 4 (expression -> ID .)
    MINUS           reduce using rule 4 (expression -> ID .)
    INT             reduce using rule 4 (expression -> ID .)
    IF              reduce using rule 4 (expression -> ID .)
    $end            reduce using rule 4 (expression -> ID .)
    RBRACKET        reduce using rule 4 (expression -> ID .)


state 13

    (3) expression -> NUMBER .

    RPAREN          reduce using rule 3 (expression -> NUMBER .)
    GREATER         reduce using rule 3 (expression -> NUMBER .)
    FEWER           reduce using rule 3 (expression -> NUMBER .)
    PLUS            reduce using rule 3 (expression -> NUMBER .)
    MINUS           reduce using rule 3 (expression -> NUMBER .)
    INT             reduce using rule 3 (expression -> NUMBER .)
    IF              reduce using rule 3 (expression -> NUMBER .)
    $end            reduce using rule 3 (expression -> NUMBER .)
    RBRACKET        reduce using rule 3 (expression -> NUMBER .)


state 14

    (1) term -> INT ID ASSIGN expression .
    (5) expression -> expression . GREATER expression
    (6) expression -> expression . FEWER expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression

    INT             reduce using rule 1 (term -> INT ID ASSIGN expression .)
    IF              reduce using rule 1 (term -> INT ID ASSIGN expression .)
    $end            reduce using rule 1 (term -> INT ID ASSIGN expression .)
    GREATER         shift and go to state 18
    FEWER           shift and go to state 19
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21


state 15

    (9) term -> IF judge brkt ELSE . brkt
    (8) brkt -> . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 10

    brkt                           shift and go to state 23

state 16

    (8) brkt -> LBRACKET expression . RBRACKET
    (5) expression -> expression . GREATER expression
    (6) expression -> expression . FEWER expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression

    RBRACKET        shift and go to state 24
    GREATER         shift and go to state 18
    FEWER           shift and go to state 19
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21


state 17

    (7) judge -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 7 (judge -> LPAREN expression RPAREN .)


state 18

    (5) expression -> expression GREATER . expression
    (2) expression -> . ID ASSIGN expression
    (3) expression -> . NUMBER
    (4) expression -> . ID
    (5) expression -> . expression GREATER expression
    (6) expression -> . expression FEWER expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression

    ID              shift and go to state 12
    NUMBER          shift and go to state 13

    expression                     shift and go to state 25

state 19

    (6) expression -> expression FEWER . expression
    (2) expression -> . ID ASSIGN expression
    (3) expression -> . NUMBER
    (4) expression -> . ID
    (5) expression -> . expression GREATER expression
    (6) expression -> . expression FEWER expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression

    ID              shift and go to state 12
    NUMBER          shift and go to state 13

    expression                     shift and go to state 26

state 20

    (10) expression -> expression PLUS . expression
    (2) expression -> . ID ASSIGN expression
    (3) expression -> . NUMBER
    (4) expression -> . ID
    (5) expression -> . expression GREATER expression
    (6) expression -> . expression FEWER expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression

    ID              shift and go to state 12
    NUMBER          shift and go to state 13

    expression                     shift and go to state 27

state 21

    (11) expression -> expression MINUS . expression
    (2) expression -> . ID ASSIGN expression
    (3) expression -> . NUMBER
    (4) expression -> . ID
    (5) expression -> . expression GREATER expression
    (6) expression -> . expression FEWER expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression

    ID              shift and go to state 12
    NUMBER          shift and go to state 13

    expression                     shift and go to state 28

state 22

    (2) expression -> ID ASSIGN . expression
    (2) expression -> . ID ASSIGN expression
    (3) expression -> . NUMBER
    (4) expression -> . ID
    (5) expression -> . expression GREATER expression
    (6) expression -> . expression FEWER expression
    (10) expression -> . expression PLUS expression
    (11) expression -> . expression MINUS expression

    ID              shift and go to state 12
    NUMBER          shift and go to state 13

    expression                     shift and go to state 29

state 23

    (9) term -> IF judge brkt ELSE brkt .

    INT             reduce using rule 9 (term -> IF judge brkt ELSE brkt .)
    IF              reduce using rule 9 (term -> IF judge brkt ELSE brkt .)
    $end            reduce using rule 9 (term -> IF judge brkt ELSE brkt .)


state 24

    (8) brkt -> LBRACKET expression RBRACKET .

    ELSE            reduce using rule 8 (brkt -> LBRACKET expression RBRACKET .)
    INT             reduce using rule 8 (brkt -> LBRACKET expression RBRACKET .)
    IF              reduce using rule 8 (brkt -> LBRACKET expression RBRACKET .)
    $end            reduce using rule 8 (brkt -> LBRACKET expression RBRACKET .)


state 25

    (5) expression -> expression GREATER expression .
    (5) expression -> expression . GREATER expression
    (6) expression -> expression . FEWER expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression

  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for FEWER resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RPAREN          reduce using rule 5 (expression -> expression GREATER expression .)
    INT             reduce using rule 5 (expression -> expression GREATER expression .)
    IF              reduce using rule 5 (expression -> expression GREATER expression .)
    $end            reduce using rule 5 (expression -> expression GREATER expression .)
    RBRACKET        reduce using rule 5 (expression -> expression GREATER expression .)
    GREATER         shift and go to state 18
    FEWER           shift and go to state 19
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21

  ! GREATER         [ reduce using rule 5 (expression -> expression GREATER expression .) ]
  ! FEWER           [ reduce using rule 5 (expression -> expression GREATER expression .) ]
  ! PLUS            [ reduce using rule 5 (expression -> expression GREATER expression .) ]
  ! MINUS           [ reduce using rule 5 (expression -> expression GREATER expression .) ]


state 26

    (6) expression -> expression FEWER expression .
    (5) expression -> expression . GREATER expression
    (6) expression -> expression . FEWER expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression

  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for FEWER resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RPAREN          reduce using rule 6 (expression -> expression FEWER expression .)
    INT             reduce using rule 6 (expression -> expression FEWER expression .)
    IF              reduce using rule 6 (expression -> expression FEWER expression .)
    $end            reduce using rule 6 (expression -> expression FEWER expression .)
    RBRACKET        reduce using rule 6 (expression -> expression FEWER expression .)
    GREATER         shift and go to state 18
    FEWER           shift and go to state 19
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21

  ! GREATER         [ reduce using rule 6 (expression -> expression FEWER expression .) ]
  ! FEWER           [ reduce using rule 6 (expression -> expression FEWER expression .) ]
  ! PLUS            [ reduce using rule 6 (expression -> expression FEWER expression .) ]
  ! MINUS           [ reduce using rule 6 (expression -> expression FEWER expression .) ]


state 27

    (10) expression -> expression PLUS expression .
    (5) expression -> expression . GREATER expression
    (6) expression -> expression . FEWER expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression

    RPAREN          reduce using rule 10 (expression -> expression PLUS expression .)
    GREATER         reduce using rule 10 (expression -> expression PLUS expression .)
    FEWER           reduce using rule 10 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 10 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 10 (expression -> expression PLUS expression .)
    INT             reduce using rule 10 (expression -> expression PLUS expression .)
    IF              reduce using rule 10 (expression -> expression PLUS expression .)
    $end            reduce using rule 10 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 10 (expression -> expression PLUS expression .)

  ! GREATER         [ shift and go to state 18 ]
  ! FEWER           [ shift and go to state 19 ]
  ! PLUS            [ shift and go to state 20 ]
  ! MINUS           [ shift and go to state 21 ]


state 28

    (11) expression -> expression MINUS expression .
    (5) expression -> expression . GREATER expression
    (6) expression -> expression . FEWER expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression

    RPAREN          reduce using rule 11 (expression -> expression MINUS expression .)
    GREATER         reduce using rule 11 (expression -> expression MINUS expression .)
    FEWER           reduce using rule 11 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 11 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 11 (expression -> expression MINUS expression .)
    INT             reduce using rule 11 (expression -> expression MINUS expression .)
    IF              reduce using rule 11 (expression -> expression MINUS expression .)
    $end            reduce using rule 11 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 11 (expression -> expression MINUS expression .)

  ! GREATER         [ shift and go to state 18 ]
  ! FEWER           [ shift and go to state 19 ]
  ! PLUS            [ shift and go to state 20 ]
  ! MINUS           [ shift and go to state 21 ]


state 29

    (2) expression -> ID ASSIGN expression .
    (5) expression -> expression . GREATER expression
    (6) expression -> expression . FEWER expression
    (10) expression -> expression . PLUS expression
    (11) expression -> expression . MINUS expression

  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for FEWER resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RPAREN          reduce using rule 2 (expression -> ID ASSIGN expression .)
    INT             reduce using rule 2 (expression -> ID ASSIGN expression .)
    IF              reduce using rule 2 (expression -> ID ASSIGN expression .)
    $end            reduce using rule 2 (expression -> ID ASSIGN expression .)
    RBRACKET        reduce using rule 2 (expression -> ID ASSIGN expression .)
    GREATER         shift and go to state 18
    FEWER           shift and go to state 19
    PLUS            shift and go to state 20
    MINUS           shift and go to state 21

  ! GREATER         [ reduce using rule 2 (expression -> ID ASSIGN expression .) ]
  ! FEWER           [ reduce using rule 2 (expression -> ID ASSIGN expression .) ]
  ! PLUS            [ reduce using rule 2 (expression -> ID ASSIGN expression .) ]
  ! MINUS           [ reduce using rule 2 (expression -> ID ASSIGN expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for INT in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 25 resolved as shift
WARNING: shift/reduce conflict for FEWER in state 25 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 25 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 25 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 26 resolved as shift
WARNING: shift/reduce conflict for FEWER in state 26 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 26 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 26 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 29 resolved as shift
WARNING: shift/reduce conflict for FEWER in state 29 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 29 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 29 resolved as shift
